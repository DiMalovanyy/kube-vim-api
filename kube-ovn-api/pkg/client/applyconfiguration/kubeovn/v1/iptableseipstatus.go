// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

// IptablesEipStatusApplyConfiguration represents a declarative configuration of the IptablesEipStatus type for use
// with apply.
type IptablesEipStatusApplyConfiguration struct {
	Ready      *bool                                    `json:"ready,omitempty"`
	IP         *string                                  `json:"ip,omitempty"`
	Redo       *string                                  `json:"redo,omitempty"`
	Nat        *string                                  `json:"nat,omitempty"`
	QoSPolicy  *string                                  `json:"qosPolicy,omitempty"`
	Conditions []IptablesEIPConditionApplyConfiguration `json:"conditions,omitempty"`
}

// IptablesEipStatusApplyConfiguration constructs a declarative configuration of the IptablesEipStatus type for use with
// apply.
func IptablesEipStatus() *IptablesEipStatusApplyConfiguration {
	return &IptablesEipStatusApplyConfiguration{}
}

// WithReady sets the Ready field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Ready field is set to the value of the last call.
func (b *IptablesEipStatusApplyConfiguration) WithReady(value bool) *IptablesEipStatusApplyConfiguration {
	b.Ready = &value
	return b
}

// WithIP sets the IP field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the IP field is set to the value of the last call.
func (b *IptablesEipStatusApplyConfiguration) WithIP(value string) *IptablesEipStatusApplyConfiguration {
	b.IP = &value
	return b
}

// WithRedo sets the Redo field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Redo field is set to the value of the last call.
func (b *IptablesEipStatusApplyConfiguration) WithRedo(value string) *IptablesEipStatusApplyConfiguration {
	b.Redo = &value
	return b
}

// WithNat sets the Nat field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Nat field is set to the value of the last call.
func (b *IptablesEipStatusApplyConfiguration) WithNat(value string) *IptablesEipStatusApplyConfiguration {
	b.Nat = &value
	return b
}

// WithQoSPolicy sets the QoSPolicy field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the QoSPolicy field is set to the value of the last call.
func (b *IptablesEipStatusApplyConfiguration) WithQoSPolicy(value string) *IptablesEipStatusApplyConfiguration {
	b.QoSPolicy = &value
	return b
}

// WithConditions adds the given value to the Conditions field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Conditions field.
func (b *IptablesEipStatusApplyConfiguration) WithConditions(values ...*IptablesEIPConditionApplyConfiguration) *IptablesEipStatusApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithConditions")
		}
		b.Conditions = append(b.Conditions, *values[i])
	}
	return b
}
