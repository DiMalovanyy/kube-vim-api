// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

// IPSpecApplyConfiguration represents a declarative configuration of the IPSpec type for use
// with apply.
type IPSpecApplyConfiguration struct {
	PodName       *string  `json:"podName,omitempty"`
	Namespace     *string  `json:"namespace,omitempty"`
	Subnet        *string  `json:"subnet,omitempty"`
	AttachSubnets []string `json:"attachSubnets,omitempty"`
	NodeName      *string  `json:"nodeName,omitempty"`
	IPAddress     *string  `json:"ipAddress,omitempty"`
	V4IPAddress   *string  `json:"v4IpAddress,omitempty"`
	V6IPAddress   *string  `json:"v6IpAddress,omitempty"`
	AttachIPs     []string `json:"attachIps,omitempty"`
	MacAddress    *string  `json:"macAddress,omitempty"`
	AttachMacs    []string `json:"attachMacs,omitempty"`
	ContainerID   *string  `json:"containerID,omitempty"`
	PodType       *string  `json:"podType,omitempty"`
}

// IPSpecApplyConfiguration constructs a declarative configuration of the IPSpec type for use with
// apply.
func IPSpec() *IPSpecApplyConfiguration {
	return &IPSpecApplyConfiguration{}
}

// WithPodName sets the PodName field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the PodName field is set to the value of the last call.
func (b *IPSpecApplyConfiguration) WithPodName(value string) *IPSpecApplyConfiguration {
	b.PodName = &value
	return b
}

// WithNamespace sets the Namespace field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Namespace field is set to the value of the last call.
func (b *IPSpecApplyConfiguration) WithNamespace(value string) *IPSpecApplyConfiguration {
	b.Namespace = &value
	return b
}

// WithSubnet sets the Subnet field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Subnet field is set to the value of the last call.
func (b *IPSpecApplyConfiguration) WithSubnet(value string) *IPSpecApplyConfiguration {
	b.Subnet = &value
	return b
}

// WithAttachSubnets adds the given value to the AttachSubnets field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the AttachSubnets field.
func (b *IPSpecApplyConfiguration) WithAttachSubnets(values ...string) *IPSpecApplyConfiguration {
	for i := range values {
		b.AttachSubnets = append(b.AttachSubnets, values[i])
	}
	return b
}

// WithNodeName sets the NodeName field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the NodeName field is set to the value of the last call.
func (b *IPSpecApplyConfiguration) WithNodeName(value string) *IPSpecApplyConfiguration {
	b.NodeName = &value
	return b
}

// WithIPAddress sets the IPAddress field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the IPAddress field is set to the value of the last call.
func (b *IPSpecApplyConfiguration) WithIPAddress(value string) *IPSpecApplyConfiguration {
	b.IPAddress = &value
	return b
}

// WithV4IPAddress sets the V4IPAddress field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the V4IPAddress field is set to the value of the last call.
func (b *IPSpecApplyConfiguration) WithV4IPAddress(value string) *IPSpecApplyConfiguration {
	b.V4IPAddress = &value
	return b
}

// WithV6IPAddress sets the V6IPAddress field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the V6IPAddress field is set to the value of the last call.
func (b *IPSpecApplyConfiguration) WithV6IPAddress(value string) *IPSpecApplyConfiguration {
	b.V6IPAddress = &value
	return b
}

// WithAttachIPs adds the given value to the AttachIPs field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the AttachIPs field.
func (b *IPSpecApplyConfiguration) WithAttachIPs(values ...string) *IPSpecApplyConfiguration {
	for i := range values {
		b.AttachIPs = append(b.AttachIPs, values[i])
	}
	return b
}

// WithMacAddress sets the MacAddress field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the MacAddress field is set to the value of the last call.
func (b *IPSpecApplyConfiguration) WithMacAddress(value string) *IPSpecApplyConfiguration {
	b.MacAddress = &value
	return b
}

// WithAttachMacs adds the given value to the AttachMacs field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the AttachMacs field.
func (b *IPSpecApplyConfiguration) WithAttachMacs(values ...string) *IPSpecApplyConfiguration {
	for i := range values {
		b.AttachMacs = append(b.AttachMacs, values[i])
	}
	return b
}

// WithContainerID sets the ContainerID field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ContainerID field is set to the value of the last call.
func (b *IPSpecApplyConfiguration) WithContainerID(value string) *IPSpecApplyConfiguration {
	b.ContainerID = &value
	return b
}

// WithPodType sets the PodType field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the PodType field is set to the value of the last call.
func (b *IPSpecApplyConfiguration) WithPodType(value string) *IPSpecApplyConfiguration {
	b.PodType = &value
	return b
}
