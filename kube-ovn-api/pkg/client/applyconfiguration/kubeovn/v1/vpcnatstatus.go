// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

import (
	corev1 "k8s.io/api/core/v1"
)

// VpcNatStatusApplyConfiguration represents a declarative configuration of the VpcNatStatus type for use
// with apply.
type VpcNatStatusApplyConfiguration struct {
	QoSPolicy       *string             `json:"qosPolicy,omitempty"`
	ExternalSubnets []string            `json:"externalSubnets,omitempty"`
	Selector        []string            `json:"selector,omitempty"`
	Tolerations     []corev1.Toleration `json:"tolerations,omitempty"`
	Affinity        *corev1.Affinity    `json:"affinity,omitempty"`
}

// VpcNatStatusApplyConfiguration constructs a declarative configuration of the VpcNatStatus type for use with
// apply.
func VpcNatStatus() *VpcNatStatusApplyConfiguration {
	return &VpcNatStatusApplyConfiguration{}
}

// WithQoSPolicy sets the QoSPolicy field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the QoSPolicy field is set to the value of the last call.
func (b *VpcNatStatusApplyConfiguration) WithQoSPolicy(value string) *VpcNatStatusApplyConfiguration {
	b.QoSPolicy = &value
	return b
}

// WithExternalSubnets adds the given value to the ExternalSubnets field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the ExternalSubnets field.
func (b *VpcNatStatusApplyConfiguration) WithExternalSubnets(values ...string) *VpcNatStatusApplyConfiguration {
	for i := range values {
		b.ExternalSubnets = append(b.ExternalSubnets, values[i])
	}
	return b
}

// WithSelector adds the given value to the Selector field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Selector field.
func (b *VpcNatStatusApplyConfiguration) WithSelector(values ...string) *VpcNatStatusApplyConfiguration {
	for i := range values {
		b.Selector = append(b.Selector, values[i])
	}
	return b
}

// WithTolerations adds the given value to the Tolerations field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Tolerations field.
func (b *VpcNatStatusApplyConfiguration) WithTolerations(values ...corev1.Toleration) *VpcNatStatusApplyConfiguration {
	for i := range values {
		b.Tolerations = append(b.Tolerations, values[i])
	}
	return b
}

// WithAffinity sets the Affinity field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Affinity field is set to the value of the last call.
func (b *VpcNatStatusApplyConfiguration) WithAffinity(value corev1.Affinity) *VpcNatStatusApplyConfiguration {
	b.Affinity = &value
	return b
}
