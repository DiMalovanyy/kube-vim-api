// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// VpcBgpSpeakerApplyConfiguration represents a declarative configuration of the VpcBgpSpeaker type for use
// with apply.
type VpcBgpSpeakerApplyConfiguration struct {
	Enabled               *bool            `json:"enabled,omitempty"`
	ASN                   *uint32          `json:"asn,omitempty"`
	RemoteASN             *uint32          `json:"remoteAsn,omitempty"`
	Neighbors             []string         `json:"neighbors,omitempty"`
	HoldTime              *metav1.Duration `json:"holdTime,omitempty"`
	RouterID              *string          `json:"routerId,omitempty"`
	Password              *string          `json:"password,omitempty"`
	EnableGracefulRestart *bool            `json:"enableGracefulRestart,omitempty"`
	ExtraArgs             []string         `json:"extraArgs,omitempty"`
}

// VpcBgpSpeakerApplyConfiguration constructs a declarative configuration of the VpcBgpSpeaker type for use with
// apply.
func VpcBgpSpeaker() *VpcBgpSpeakerApplyConfiguration {
	return &VpcBgpSpeakerApplyConfiguration{}
}

// WithEnabled sets the Enabled field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Enabled field is set to the value of the last call.
func (b *VpcBgpSpeakerApplyConfiguration) WithEnabled(value bool) *VpcBgpSpeakerApplyConfiguration {
	b.Enabled = &value
	return b
}

// WithASN sets the ASN field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ASN field is set to the value of the last call.
func (b *VpcBgpSpeakerApplyConfiguration) WithASN(value uint32) *VpcBgpSpeakerApplyConfiguration {
	b.ASN = &value
	return b
}

// WithRemoteASN sets the RemoteASN field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the RemoteASN field is set to the value of the last call.
func (b *VpcBgpSpeakerApplyConfiguration) WithRemoteASN(value uint32) *VpcBgpSpeakerApplyConfiguration {
	b.RemoteASN = &value
	return b
}

// WithNeighbors adds the given value to the Neighbors field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Neighbors field.
func (b *VpcBgpSpeakerApplyConfiguration) WithNeighbors(values ...string) *VpcBgpSpeakerApplyConfiguration {
	for i := range values {
		b.Neighbors = append(b.Neighbors, values[i])
	}
	return b
}

// WithHoldTime sets the HoldTime field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the HoldTime field is set to the value of the last call.
func (b *VpcBgpSpeakerApplyConfiguration) WithHoldTime(value metav1.Duration) *VpcBgpSpeakerApplyConfiguration {
	b.HoldTime = &value
	return b
}

// WithRouterID sets the RouterID field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the RouterID field is set to the value of the last call.
func (b *VpcBgpSpeakerApplyConfiguration) WithRouterID(value string) *VpcBgpSpeakerApplyConfiguration {
	b.RouterID = &value
	return b
}

// WithPassword sets the Password field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Password field is set to the value of the last call.
func (b *VpcBgpSpeakerApplyConfiguration) WithPassword(value string) *VpcBgpSpeakerApplyConfiguration {
	b.Password = &value
	return b
}

// WithEnableGracefulRestart sets the EnableGracefulRestart field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the EnableGracefulRestart field is set to the value of the last call.
func (b *VpcBgpSpeakerApplyConfiguration) WithEnableGracefulRestart(value bool) *VpcBgpSpeakerApplyConfiguration {
	b.EnableGracefulRestart = &value
	return b
}

// WithExtraArgs adds the given value to the ExtraArgs field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the ExtraArgs field.
func (b *VpcBgpSpeakerApplyConfiguration) WithExtraArgs(values ...string) *VpcBgpSpeakerApplyConfiguration {
	for i := range values {
		b.ExtraArgs = append(b.ExtraArgs, values[i])
	}
	return b
}
