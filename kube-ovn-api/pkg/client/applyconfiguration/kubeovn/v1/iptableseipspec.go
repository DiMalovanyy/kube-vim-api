// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

// IptablesEipSpecApplyConfiguration represents a declarative configuration of the IptablesEipSpec type for use
// with apply.
type IptablesEipSpecApplyConfiguration struct {
	V4ip           *string `json:"v4ip,omitempty"`
	V6ip           *string `json:"v6ip,omitempty"`
	MacAddress     *string `json:"macAddress,omitempty"`
	NatGwDp        *string `json:"natGwDp,omitempty"`
	QoSPolicy      *string `json:"qosPolicy,omitempty"`
	ExternalSubnet *string `json:"externalSubnet,omitempty"`
}

// IptablesEipSpecApplyConfiguration constructs a declarative configuration of the IptablesEipSpec type for use with
// apply.
func IptablesEipSpec() *IptablesEipSpecApplyConfiguration {
	return &IptablesEipSpecApplyConfiguration{}
}

// WithV4ip sets the V4ip field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the V4ip field is set to the value of the last call.
func (b *IptablesEipSpecApplyConfiguration) WithV4ip(value string) *IptablesEipSpecApplyConfiguration {
	b.V4ip = &value
	return b
}

// WithV6ip sets the V6ip field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the V6ip field is set to the value of the last call.
func (b *IptablesEipSpecApplyConfiguration) WithV6ip(value string) *IptablesEipSpecApplyConfiguration {
	b.V6ip = &value
	return b
}

// WithMacAddress sets the MacAddress field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the MacAddress field is set to the value of the last call.
func (b *IptablesEipSpecApplyConfiguration) WithMacAddress(value string) *IptablesEipSpecApplyConfiguration {
	b.MacAddress = &value
	return b
}

// WithNatGwDp sets the NatGwDp field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the NatGwDp field is set to the value of the last call.
func (b *IptablesEipSpecApplyConfiguration) WithNatGwDp(value string) *IptablesEipSpecApplyConfiguration {
	b.NatGwDp = &value
	return b
}

// WithQoSPolicy sets the QoSPolicy field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the QoSPolicy field is set to the value of the last call.
func (b *IptablesEipSpecApplyConfiguration) WithQoSPolicy(value string) *IptablesEipSpecApplyConfiguration {
	b.QoSPolicy = &value
	return b
}

// WithExternalSubnet sets the ExternalSubnet field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ExternalSubnet field is set to the value of the last call.
func (b *IptablesEipSpecApplyConfiguration) WithExternalSubnet(value string) *IptablesEipSpecApplyConfiguration {
	b.ExternalSubnet = &value
	return b
}
