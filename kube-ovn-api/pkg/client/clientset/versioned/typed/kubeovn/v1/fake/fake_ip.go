// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	context "context"
	json "encoding/json"
	fmt "fmt"

	v1 "github.com/kube-nfv/kube-vim-api/kube-ovn-api/pkg/apis/kubeovn/v1"
	kubeovnv1 "github.com/kube-nfv/kube-vim-api/kube-ovn-api/pkg/client/applyconfiguration/kubeovn/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeIPs implements IPInterface
type FakeIPs struct {
	Fake *FakeKubeovnV1
}

var ipsResource = v1.SchemeGroupVersion.WithResource("ips")

var ipsKind = v1.SchemeGroupVersion.WithKind("IP")

// Get takes name of the iP, and returns the corresponding iP object, and an error if there is any.
func (c *FakeIPs) Get(ctx context.Context, name string, options metav1.GetOptions) (result *v1.IP, err error) {
	emptyResult := &v1.IP{}
	obj, err := c.Fake.
		Invokes(testing.NewRootGetActionWithOptions(ipsResource, name, options), emptyResult)
	if obj == nil {
		return emptyResult, err
	}
	return obj.(*v1.IP), err
}

// List takes label and field selectors, and returns the list of IPs that match those selectors.
func (c *FakeIPs) List(ctx context.Context, opts metav1.ListOptions) (result *v1.IPList, err error) {
	emptyResult := &v1.IPList{}
	obj, err := c.Fake.
		Invokes(testing.NewRootListActionWithOptions(ipsResource, ipsKind, opts), emptyResult)
	if obj == nil {
		return emptyResult, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &v1.IPList{ListMeta: obj.(*v1.IPList).ListMeta}
	for _, item := range obj.(*v1.IPList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested iPs.
func (c *FakeIPs) Watch(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewRootWatchActionWithOptions(ipsResource, opts))
}

// Create takes the representation of a iP and creates it.  Returns the server's representation of the iP, and an error, if there is any.
func (c *FakeIPs) Create(ctx context.Context, iP *v1.IP, opts metav1.CreateOptions) (result *v1.IP, err error) {
	emptyResult := &v1.IP{}
	obj, err := c.Fake.
		Invokes(testing.NewRootCreateActionWithOptions(ipsResource, iP, opts), emptyResult)
	if obj == nil {
		return emptyResult, err
	}
	return obj.(*v1.IP), err
}

// Update takes the representation of a iP and updates it. Returns the server's representation of the iP, and an error, if there is any.
func (c *FakeIPs) Update(ctx context.Context, iP *v1.IP, opts metav1.UpdateOptions) (result *v1.IP, err error) {
	emptyResult := &v1.IP{}
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateActionWithOptions(ipsResource, iP, opts), emptyResult)
	if obj == nil {
		return emptyResult, err
	}
	return obj.(*v1.IP), err
}

// Delete takes name of the iP and deletes it. Returns an error if one occurs.
func (c *FakeIPs) Delete(ctx context.Context, name string, opts metav1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewRootDeleteActionWithOptions(ipsResource, name, opts), &v1.IP{})
	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeIPs) DeleteCollection(ctx context.Context, opts metav1.DeleteOptions, listOpts metav1.ListOptions) error {
	action := testing.NewRootDeleteCollectionActionWithOptions(ipsResource, opts, listOpts)

	_, err := c.Fake.Invokes(action, &v1.IPList{})
	return err
}

// Patch applies the patch and returns the patched iP.
func (c *FakeIPs) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts metav1.PatchOptions, subresources ...string) (result *v1.IP, err error) {
	emptyResult := &v1.IP{}
	obj, err := c.Fake.
		Invokes(testing.NewRootPatchSubresourceActionWithOptions(ipsResource, name, pt, data, opts, subresources...), emptyResult)
	if obj == nil {
		return emptyResult, err
	}
	return obj.(*v1.IP), err
}

// Apply takes the given apply declarative configuration, applies it and returns the applied iP.
func (c *FakeIPs) Apply(ctx context.Context, iP *kubeovnv1.IPApplyConfiguration, opts metav1.ApplyOptions) (result *v1.IP, err error) {
	if iP == nil {
		return nil, fmt.Errorf("iP provided to Apply must not be nil")
	}
	data, err := json.Marshal(iP)
	if err != nil {
		return nil, err
	}
	name := iP.Name
	if name == nil {
		return nil, fmt.Errorf("iP.Name must be provided to Apply")
	}
	emptyResult := &v1.IP{}
	obj, err := c.Fake.
		Invokes(testing.NewRootPatchSubresourceActionWithOptions(ipsResource, *name, types.ApplyPatchType, data, opts.ToPatchOptions()), emptyResult)
	if obj == nil {
		return emptyResult, err
	}
	return obj.(*v1.IP), err
}
