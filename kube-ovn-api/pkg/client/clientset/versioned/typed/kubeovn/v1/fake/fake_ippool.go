// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	context "context"
	json "encoding/json"
	fmt "fmt"

	v1 "github.com/kube-nfv/kube-vim-api/kube-ovn-api/pkg/apis/kubeovn/v1"
	kubeovnv1 "github.com/kube-nfv/kube-vim-api/kube-ovn-api/pkg/client/applyconfiguration/kubeovn/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeIPPools implements IPPoolInterface
type FakeIPPools struct {
	Fake *FakeKubeovnV1
}

var ippoolsResource = v1.SchemeGroupVersion.WithResource("ippools")

var ippoolsKind = v1.SchemeGroupVersion.WithKind("IPPool")

// Get takes name of the iPPool, and returns the corresponding iPPool object, and an error if there is any.
func (c *FakeIPPools) Get(ctx context.Context, name string, options metav1.GetOptions) (result *v1.IPPool, err error) {
	emptyResult := &v1.IPPool{}
	obj, err := c.Fake.
		Invokes(testing.NewRootGetActionWithOptions(ippoolsResource, name, options), emptyResult)
	if obj == nil {
		return emptyResult, err
	}
	return obj.(*v1.IPPool), err
}

// List takes label and field selectors, and returns the list of IPPools that match those selectors.
func (c *FakeIPPools) List(ctx context.Context, opts metav1.ListOptions) (result *v1.IPPoolList, err error) {
	emptyResult := &v1.IPPoolList{}
	obj, err := c.Fake.
		Invokes(testing.NewRootListActionWithOptions(ippoolsResource, ippoolsKind, opts), emptyResult)
	if obj == nil {
		return emptyResult, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &v1.IPPoolList{ListMeta: obj.(*v1.IPPoolList).ListMeta}
	for _, item := range obj.(*v1.IPPoolList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested iPPools.
func (c *FakeIPPools) Watch(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewRootWatchActionWithOptions(ippoolsResource, opts))
}

// Create takes the representation of a iPPool and creates it.  Returns the server's representation of the iPPool, and an error, if there is any.
func (c *FakeIPPools) Create(ctx context.Context, iPPool *v1.IPPool, opts metav1.CreateOptions) (result *v1.IPPool, err error) {
	emptyResult := &v1.IPPool{}
	obj, err := c.Fake.
		Invokes(testing.NewRootCreateActionWithOptions(ippoolsResource, iPPool, opts), emptyResult)
	if obj == nil {
		return emptyResult, err
	}
	return obj.(*v1.IPPool), err
}

// Update takes the representation of a iPPool and updates it. Returns the server's representation of the iPPool, and an error, if there is any.
func (c *FakeIPPools) Update(ctx context.Context, iPPool *v1.IPPool, opts metav1.UpdateOptions) (result *v1.IPPool, err error) {
	emptyResult := &v1.IPPool{}
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateActionWithOptions(ippoolsResource, iPPool, opts), emptyResult)
	if obj == nil {
		return emptyResult, err
	}
	return obj.(*v1.IPPool), err
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *FakeIPPools) UpdateStatus(ctx context.Context, iPPool *v1.IPPool, opts metav1.UpdateOptions) (result *v1.IPPool, err error) {
	emptyResult := &v1.IPPool{}
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateSubresourceActionWithOptions(ippoolsResource, "status", iPPool, opts), emptyResult)
	if obj == nil {
		return emptyResult, err
	}
	return obj.(*v1.IPPool), err
}

// Delete takes name of the iPPool and deletes it. Returns an error if one occurs.
func (c *FakeIPPools) Delete(ctx context.Context, name string, opts metav1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewRootDeleteActionWithOptions(ippoolsResource, name, opts), &v1.IPPool{})
	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeIPPools) DeleteCollection(ctx context.Context, opts metav1.DeleteOptions, listOpts metav1.ListOptions) error {
	action := testing.NewRootDeleteCollectionActionWithOptions(ippoolsResource, opts, listOpts)

	_, err := c.Fake.Invokes(action, &v1.IPPoolList{})
	return err
}

// Patch applies the patch and returns the patched iPPool.
func (c *FakeIPPools) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts metav1.PatchOptions, subresources ...string) (result *v1.IPPool, err error) {
	emptyResult := &v1.IPPool{}
	obj, err := c.Fake.
		Invokes(testing.NewRootPatchSubresourceActionWithOptions(ippoolsResource, name, pt, data, opts, subresources...), emptyResult)
	if obj == nil {
		return emptyResult, err
	}
	return obj.(*v1.IPPool), err
}

// Apply takes the given apply declarative configuration, applies it and returns the applied iPPool.
func (c *FakeIPPools) Apply(ctx context.Context, iPPool *kubeovnv1.IPPoolApplyConfiguration, opts metav1.ApplyOptions) (result *v1.IPPool, err error) {
	if iPPool == nil {
		return nil, fmt.Errorf("iPPool provided to Apply must not be nil")
	}
	data, err := json.Marshal(iPPool)
	if err != nil {
		return nil, err
	}
	name := iPPool.Name
	if name == nil {
		return nil, fmt.Errorf("iPPool.Name must be provided to Apply")
	}
	emptyResult := &v1.IPPool{}
	obj, err := c.Fake.
		Invokes(testing.NewRootPatchSubresourceActionWithOptions(ippoolsResource, *name, types.ApplyPatchType, data, opts.ToPatchOptions()), emptyResult)
	if obj == nil {
		return emptyResult, err
	}
	return obj.(*v1.IPPool), err
}

// ApplyStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating ApplyStatus().
func (c *FakeIPPools) ApplyStatus(ctx context.Context, iPPool *kubeovnv1.IPPoolApplyConfiguration, opts metav1.ApplyOptions) (result *v1.IPPool, err error) {
	if iPPool == nil {
		return nil, fmt.Errorf("iPPool provided to Apply must not be nil")
	}
	data, err := json.Marshal(iPPool)
	if err != nil {
		return nil, err
	}
	name := iPPool.Name
	if name == nil {
		return nil, fmt.Errorf("iPPool.Name must be provided to Apply")
	}
	emptyResult := &v1.IPPool{}
	obj, err := c.Fake.
		Invokes(testing.NewRootPatchSubresourceActionWithOptions(ippoolsResource, *name, types.ApplyPatchType, data, opts.ToPatchOptions(), "status"), emptyResult)
	if obj == nil {
		return emptyResult, err
	}
	return obj.(*v1.IPPool), err
}
